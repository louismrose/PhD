retype Model to Package
migrate Model {
	migrated.packagedElement := original.ownedElement.equivalent();
}

retype ActivityGraph to Activity
migrate ActivityGraph {
	migrated.node := original.top.subvertex.equivalent();
	migrated.edge := original.transitions.equivalent();
}

retype Partition to ActivityPartition
migrate Partition {
	migrated.edges := original.contents.collect(e : Transition | e.equivalent());
	migrated.nodes := original.contents.reject(ofs : ObjectFlowState | true).collect(n : StateVertex | n.equivalent());	
}

retype ActionState to OpaqueAction

retype Pseudostate to InitialNode  when: original.kind.toString() = 'pk_initial'
retype Pseudostate to DecisionNode when: original.kind.toString() = 'pk_junction'
retype Pseudostate to ForkNode     when: original.kind.toString() = 'pk_fork'
retype Pseudostate to JoinNode     when: original.kind.toString() = 'pk_join'

retype FinalState to ActivityFinalNode

retype Transition to ObjectFlow when: original.target.isTypeOf(ObjectFlowState)
migrate Transition when: original.target.isTypeOf(ObjectFlowState) {
	migrated.source := original.source.equivalent();
	migrated.target := original.target.outgoing.first.target.equivalent();
}

retype Transition to ControlFlow

retype Guard to OpaqueExpression
migrate Guard {
	migrated.body.add(original.expression.body);
}
