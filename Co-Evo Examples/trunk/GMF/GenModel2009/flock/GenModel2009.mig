migrate GenLinkLabel { // TODO: migrate GenLinkLabel ignoring notationViewFactoryClassName
	migrated.notationViewFactoryClassName := null;
}

migrate GenLink { // TODO: migrate GenLink ignoring notationViewFactoryClassName
	migrated.notationViewFactoryClassName := null;
}

migrate GenEditorGenerator {
	migrated.contextMenus.add(new Migrated!GenContextMenu);
	migrated.contextMenus.first.context.add(migrated.diagram);
	
	migrated.contextMenus.first.items.add(new Migrated!LoadResourceAction);
	
	for (shortcutName in original.diagram.containsShortcutsTo) {
		migrated.contextMenus.first.items.add(new Migrated!CreateShortcutAction);
	}
}


migrate GenDiagram {
	migrated.validationProviderPriority := Migrated!ProviderPriority#Lowest;
}

migrate FeatureLabelModelFacet {
	migrated.parser := createOrRetrievePredefinedParser(migrated.viewMethod, migrated.editMethod);
	migrated.viewMethod := null;
	migrated.editMethod := null;
}

migrate DesignLabelModelFacet {
	migrated.parser := createOrRetrieveExternalParser();
}

operation createOrRetrievePredefinedParser(viewMethod : Any, editMethod : Any) : Migrated!PredefinedParser {
	if (getPredefinedParser(viewMethod, editMethod).isUndefined()) {
		createOrRetrieveGenParsers().implementations.add(createPredefinedParser(viewMethod, editMethod));
	}

	return getPredefinedParser(viewMethod, editMethod);
}

operation getPredefinedParser(viewMethod : Any, editMethod : Any) : Migrated!PredefinedParser {
	return Migrated!PredefinedParser.all.selectOne(p | p.viewMethod = viewMethod and p.editMethod = editMethod);
}

operation createPredefinedParser(viewMethod : Any, editMethod : Any) : Migrated!PredefinedParser {
	var parser := new Migrated!PredefinedParser;
	parser.viewMethod := viewMethod;
	parser.editMethod := editMethod;
	return parser;
}

operation createOrRetrieveExternalParser() : Migrated!ExternalParser {
	if (Migrated!ExternalParser.all.isEmpty()) {
		createOrRetrieveGenParsers().implementations.add(new Migrated!ExternalParser);
	}

	return Migrated!ExternalParser.all.first;
}

operation createOrRetrieveGenParsers() : Migrated!GenParsers {
	if (Migrated!GenEditorGenerator.all.first.labelParsers.isUndefined()) {
		Migrated!GenEditorGenerator.all.first.labelParsers := new Migrated!GenParsers;
		Migrated!GenEditorGenerator.all.first.labelParsers.extensibleViaService = true;
	}
	
	return Migrated!GenEditorGenerator.all.first.labelParsers;
}