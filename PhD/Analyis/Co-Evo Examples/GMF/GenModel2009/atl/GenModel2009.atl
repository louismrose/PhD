module GenModel2009;

create Migrated : After from Original : Before;

rule GenEditorGenerator2GenEditorGenerator {
  from
    o : Before!GenEditorGenerator
  to
    m : After!GenEditorGenerator (
      audits <- o.audits,
      metrics <- o.metrics,
      diagram <- o.diagram,
      plugin <- o.plugin,
      editor <- o.editor,
      navigator <- o.navigator,
      diagramUpdater <- o.diagramUpdater,
      propertySheet <- o.propertySheet,
      application <- o.application,
      domainGenModel <- o.domainGenModel,
      packageNamePrefix <- o.packageNamePrefix,
      modelID <- o.modelID,
      sameFileForDiagramAndModel <- o.sameFileForDiagramAndModel,
      diagramFileExtension <- o.diagramFileExtension,
      domainFileExtension <- o.domainFileExtension,
      dynamicTemplates <- o.dynamicTemplates,
      templateDirectory <- o.templateDirectory,
      copyrightText <- o.copyrightText,
      expressionProviders <- o.expressionProviders,
      modelAccess <- o.modelAccess
    )
}
rule GenDiagram2GenDiagram extends GenContainerBase2GenContainerBase {
  from
    o : Before!GenDiagram
  to
    m : After!GenDiagram (
      domainDiagramElement <- o.domainDiagramElement,
      childNodes <- o.childNodes,
      topLevelNodes <- o.topLevelNodes,
      links <- o.links,
      compartments <- o.compartments,
      palette <- o.palette,
      synchronized <- o.synchronized,
      preferences <- o.preferences,
      preferencePages <- o.preferencePages
    )
}
rule GenEditorView2GenEditorView {
  from
    o : Before!GenEditorView
  to
    m : After!GenEditorView (
      packageName <- o.packageName,
      actionBarContributorClassName <- o.actionBarContributorClassName,
      className <- o.className,
      iconPath <- o.iconPath,
      iD <- o.iD,
      eclipseEditor <- o.eclipseEditor,
      contextID <- o.contextID
    )
}
abstract rule GenPreferencePage2GenPreferencePage {
  from
    o : Before!GenPreferencePage
  to
    m : After!GenPreferencePage (
      iD <- o.iD,
      name <- o.name,
      children <- o.children
    )
}
rule GenCustomPreferencePage2GenCustomPreferencePage extends GenPreferencePage2GenPreferencePage {
  from
    o : Before!GenCustomPreferencePage
  to
    m : After!GenCustomPreferencePage (
      qualifiedClassName <- o.qualifiedClassName
    )
}
rule GenStandardPreferencePage2GenStandardPreferencePage extends GenPreferencePage2GenPreferencePage {
  from
    o : Before!GenStandardPreferencePage
  to
    m : After!GenStandardPreferencePage (
      kind <- o.kind
    )
}
rule GenDiagramPreferences2GenDiagramPreferences {
  from
    o : Before!GenDiagramPreferences
  to
    m : After!GenDiagramPreferences (
      lineStyle <- o.lineStyle,
      defaultFont <- o.defaultFont,
      fontColor <- o.fontColor,
      fillColor <- o.fillColor,
      lineColor <- o.lineColor,
      noteFillColor <- o.noteFillColor,
      noteLineColor <- o.noteLineColor,
      showConnectionHandles <- o.showConnectionHandles,
      showPopupBars <- o.showPopupBars,
      promptOnDelFromModel <- o.promptOnDelFromModel,
      promptOnDelFromDiagram <- o.promptOnDelFromDiagram,
      enableAnimatedLayout <- o.enableAnimatedLayout,
      enableAnimatedZoom <- o.enableAnimatedZoom,
      enableAntiAlias <- o.enableAntiAlias,
      showGrid <- o.showGrid,
      showRulers <- o.showRulers,
      snapToGrid <- o.snapToGrid,
      snapToGeometry <- o.snapToGeometry,
      gridInFront <- o.gridInFront,
      rulerUnits <- o.rulerUnits,
      gridSpacing <- o.gridSpacing,
      gridLineColor <- o.gridLineColor,
      gridLineStyle <- o.gridLineStyle
    )
}
abstract rule GenFont2GenFont {
  from
    o : Before!GenFont
  to
    m : After!GenFont
}
rule GenStandardFont2GenStandardFont extends GenFont2GenFont {
  from
    o : Before!GenStandardFont
  to
    m : After!GenStandardFont (
      name <- o.name
    )
}
rule GenCustomFont2GenCustomFont extends GenFont2GenFont {
  from
    o : Before!GenCustomFont
  to
    m : After!GenCustomFont (
      name <- o.name,
      height <- o.height,
      style <- o.style
    )
}
abstract rule GenColor2GenColor {
  from
    o : Before!GenColor
  to
    m : After!GenColor
}
rule GenRGBColor2GenRGBColor extends GenColor2GenColor {
  from
    o : Before!GenRGBColor
  to
    m : After!GenRGBColor (
      red <- o.red,
      green <- o.green,
      blue <- o.blue
    )
}
rule GenConstantColor2GenConstantColor extends GenColor2GenColor {
  from
    o : Before!GenConstantColor
  to
    m : After!GenConstantColor (
      name <- o.name
    )
}
rule GenDiagramUpdater2GenDiagramUpdater {
  from
    o : Before!GenDiagramUpdater
  to
    m : After!GenDiagramUpdater (
      diagramUpdaterClassName <- o.diagramUpdaterClassName,
      nodeDescriptorClassName <- o.nodeDescriptorClassName,
      linkDescriptorClassName <- o.linkDescriptorClassName,
      updateCommandClassName <- o.updateCommandClassName,
      updateCommandID <- o.updateCommandID
    )
}
rule GenPlugin2GenPlugin {
  from
    o : Before!GenPlugin
  to
    m : After!GenPlugin (
      iD <- o.iD,
      name <- o.name,
      provider <- o.provider,
      version <- o.version,
      printingEnabled <- o.printingEnabled,
      requiredPlugins <- o.requiredPlugins,
      activatorClassName <- o.activatorClassName
    )
}
rule DynamicModelAccess2DynamicModelAccess {
  from
    o : Before!DynamicModelAccess
  to
    m : After!DynamicModelAccess (
      packageName <- o.packageName,
      className <- o.className
    )
}
abstract rule GenCommonBase2GenCommonBase {
  from
    o : Before!GenCommonBase
  to
    m : After!GenCommonBase (
      diagramRunTimeClass <- o.diagramRunTimeClass,
      visualID <- o.visualID,
      elementType <- o.elementType,
      editPartClassName <- o.editPartClassName,
      itemSemanticEditPolicyClassName <- o.itemSemanticEditPolicyClassName,
      notationViewFactoryClassName <- o.notationViewFactoryClassName,
      viewmap <- o.viewmap,
      styles <- o.styles,
      behaviour <- o.behaviour
    )
}
abstract rule Behaviour2Behaviour {
  from
    o : Before!Behaviour
  to
    m : After!Behaviour
}
rule CustomBehaviour2CustomBehaviour extends Behaviour2Behaviour {
  from
    o : Before!CustomBehaviour
  to
    m : After!CustomBehaviour (
      key <- o.key,
      editPolicyQualifiedClassName <- o.editPolicyQualifiedClassName
    )
}
rule SharedBehaviour2SharedBehaviour extends Behaviour2Behaviour {
  from
    o : Before!SharedBehaviour
  to
    m : After!SharedBehaviour (
      delegate <- o.delegate
    )
}
rule OpenDiagramBehaviour2OpenDiagramBehaviour extends Behaviour2Behaviour {
  from
    o : Before!OpenDiagramBehaviour
  to
    m : After!OpenDiagramBehaviour (
      editPolicyClassName <- o.editPolicyClassName,
      diagramKind <- o.diagramKind,
      editorID <- o.editorID,
      openAsEclipseEditor <- o.openAsEclipseEditor
    )
}
abstract rule GenContainerBase2GenContainerBase extends GenCommonBase2GenCommonBase {
  from
    o : Before!GenContainerBase
  to
    m : After!GenContainerBase (
      canonicalEditPolicyClassName <- o.canonicalEditPolicyClassName
    )
}
abstract rule GenChildContainer2GenChildContainer extends GenContainerBase2GenContainerBase {
  from
    o : Before!GenChildContainer
  to
    m : After!GenChildContainer (
      childNodes <- o.childNodes
    )
}
abstract rule GenNode2GenNode extends GenChildContainer2GenChildContainer {
  from
    o : Before!GenNode
  to
    m : After!GenNode (
      modelFacet <- o.modelFacet,
      labels <- o.labels,
      compartments <- o.compartments,
      primaryDragEditPolicyQualifiedClassName <- o.primaryDragEditPolicyQualifiedClassName,
      graphicalNodeEditPolicyClassName <- o.graphicalNodeEditPolicyClassName,
      createCommandClassName <- o.createCommandClassName
    )
}
rule GenTopLevelNode2GenTopLevelNode extends GenNode2GenNode {
  from
    o : Before!GenTopLevelNode
  to
    m : After!GenTopLevelNode
}
rule GenChildNode2GenChildNode extends GenNode2GenNode {
  from
    o : Before!GenChildNode
  to
    m : After!GenChildNode
}
rule GenChildSideAffixedNode2GenChildSideAffixedNode extends GenChildNode2GenChildNode {
  from
    o : Before!GenChildSideAffixedNode
  to
    m : After!GenChildSideAffixedNode (
      preferredSideName <- o.preferredSideName
    )
}
rule GenChildLabelNode2GenChildLabelNode extends GenChildNode2GenChildNode {
  from
    o : Before!GenChildLabelNode
  to
    m : After!GenChildLabelNode (
      labelReadOnly <- o.labelReadOnly,
      labelElementIcon <- o.labelElementIcon,
      labelModelFacet <- o.labelModelFacet
    )
}
rule GenCompartment2GenCompartment extends GenChildContainer2GenChildContainer {
  from
    o : Before!GenCompartment
  to
    m : After!GenCompartment (
      title <- o.title,
      canCollapse <- o.canCollapse,
      hideIfEmpty <- o.hideIfEmpty,
      needsTitle <- o.needsTitle,
      node <- o.node,
      listLayout <- o.listLayout
    )
}
rule GenLink2GenLink extends GenCommonBase2GenCommonBase {
  from
    o : Before!GenLink
  to
    m : After!GenLink (
      modelFacet <- o.modelFacet,
      labels <- o.labels,
      outgoingCreationAllowed <- o.outgoingCreationAllowed,
      incomingCreationAllowed <- o.incomingCreationAllowed,
      viewDirectionAlignedWithModel <- o.viewDirectionAlignedWithModel,
      creationConstraints <- o.creationConstraints,
      createCommandClassName <- o.createCommandClassName,
      reorientCommandClassName <- o.reorientCommandClassName,
      treeBranch <- o.treeBranch
    )
}
abstract rule GenLabel2GenLabel extends GenCommonBase2GenCommonBase {
  from
    o : Before!GenLabel
  to
    m : After!GenLabel (
      readOnly <- o.readOnly,
      elementIcon <- o.elementIcon,
      modelFacet <- o.modelFacet
    )
}
rule GenNodeLabel2GenNodeLabel extends GenLabel2GenLabel {
  from
    o : Before!GenNodeLabel
  to
    m : After!GenNodeLabel
}
rule GenExternalNodeLabel2GenExternalNodeLabel extends GenNodeLabel2GenNodeLabel {
  from
    o : Before!GenExternalNodeLabel
  to
    m : After!GenExternalNodeLabel
}
rule GenLinkLabel2GenLinkLabel extends GenLabel2GenLabel {
  from
    o : Before!GenLinkLabel
  to
    m : After!GenLinkLabel (
      link <- o.link,
      alignment <- o.alignment
    )
}
abstract rule ElementType2ElementType {
  from
    o : Before!ElementType
  to
    m : After!ElementType (
      diagramElement <- o.diagramElement,
      uniqueIdentifier <- o.uniqueIdentifier,
      displayName <- o.displayName,
      definedExternally <- o.definedExternally
    )
}
rule MetamodelType2MetamodelType extends ElementType2ElementType {
  from
    o : Before!MetamodelType
  to
    m : After!MetamodelType (
      editHelperClassName <- o.editHelperClassName
    )
}
rule SpecializationType2SpecializationType extends ElementType2ElementType {
  from
    o : Before!SpecializationType
  to
    m : After!SpecializationType (
      metamodelType <- o.metamodelType,
      editHelperAdviceClassName <- o.editHelperAdviceClassName
    )
}
rule NotationType2NotationType extends ElementType2ElementType {
  from
    o : Before!NotationType
  to
    m : After!NotationType
}
abstract rule ModelFacet2ModelFacet {
  from
    o : Before!ModelFacet
  to
    m : After!ModelFacet
}
abstract rule LinkModelFacet2LinkModelFacet extends ModelFacet2ModelFacet {
  from
    o : Before!LinkModelFacet
  to
    m : After!LinkModelFacet
}
abstract rule LabelModelFacet2LabelModelFacet extends ModelFacet2ModelFacet {
  from
    o : Before!LabelModelFacet
  to
    m : After!LabelModelFacet
}
rule TypeModelFacet2TypeModelFacet extends ModelFacet2ModelFacet {
  from
    o : Before!TypeModelFacet
  to
    m : After!TypeModelFacet (
      metaClass <- o.metaClass,
      containmentMetaFeature <- o.containmentMetaFeature,
      childMetaFeature <- o.childMetaFeature,
      modelElementSelector <- o.modelElementSelector,
      modelElementInitializer <- o.modelElementInitializer
    )
}
rule TypeLinkModelFacet2TypeLinkModelFacet extends TypeModelFacet2TypeModelFacet {
  from
    o : Before!TypeLinkModelFacet
  to
    m : After!TypeLinkModelFacet (
      sourceMetaFeature <- o.sourceMetaFeature,
      targetMetaFeature <- o.targetMetaFeature
    )
}
rule FeatureLinkModelFacet2FeatureLinkModelFacet extends LinkModelFacet2LinkModelFacet {
  from
    o : Before!FeatureLinkModelFacet
  to
    m : After!FeatureLinkModelFacet (
      metaFeature <- o.metaFeature
    )
}
rule FeatureLabelModelFacet2FeatureLabelModelFacet extends LabelModelFacet2LabelModelFacet {
  from
    o : Before!FeatureLabelModelFacet
  to
    m : After!FeatureLabelModelFacet (
      metaFeatures <- o.metaFeatures,
      viewPattern <- o.viewPattern,
      editorPattern <- o.editorPattern,
      editPattern <- o.editPattern,
      viewMethod <- o.viewMethod,
      editMethod <- o.editMethod
    )
}
rule DesignLabelModelFacet2DesignLabelModelFacet extends LabelModelFacet2LabelModelFacet {
  from
    o : Before!DesignLabelModelFacet
  to
    m : After!DesignLabelModelFacet
}
abstract rule Attributes2Attributes {
  from
    o : Before!Attributes
  to
    m : After!Attributes
}
rule ColorAttributes2ColorAttributes extends Attributes2Attributes {
  from
    o : Before!ColorAttributes
  to
    m : After!ColorAttributes (
      foregroundColor <- o.foregroundColor,
      backgroundColor <- o.backgroundColor
    )
}
rule StyleAttributes2StyleAttributes extends Attributes2Attributes {
  from
    o : Before!StyleAttributes
  to
    m : After!StyleAttributes (
      fixedFont <- o.fixedFont,
      fixedForeground <- o.fixedForeground,
      fixedBackground <- o.fixedBackground
    )
}
rule ResizeConstraints2ResizeConstraints extends Attributes2Attributes {
  from
    o : Before!ResizeConstraints
  to
    m : After!ResizeConstraints (
      resizeHandles <- o.resizeHandles,
      nonResizeHandles <- o.nonResizeHandles
    )
}
rule DefaultSizeAttributes2DefaultSizeAttributes extends Attributes2Attributes {
  from
    o : Before!DefaultSizeAttributes
  to
    m : After!DefaultSizeAttributes (
      width <- o.width,
      height <- o.height
    )
}
rule LabelOffsetAttributes2LabelOffsetAttributes extends Attributes2Attributes {
  from
    o : Before!LabelOffsetAttributes
  to
    m : After!LabelOffsetAttributes (
      x <- o.x,
      y <- o.y
    )
}
abstract rule Viewmap2Viewmap {
  from
    o : Before!Viewmap
  to
    m : After!Viewmap (
      attributes <- o.attributes,
      requiredPluginIDs <- o.requiredPluginIDs,
      layoutType <- o.layoutType
    )
}
rule FigureViewmap2FigureViewmap extends Viewmap2Viewmap {
  from
    o : Before!FigureViewmap
  to
    m : After!FigureViewmap (
      figureQualifiedClassName <- o.figureQualifiedClassName
    )
}
rule SnippetViewmap2SnippetViewmap extends Viewmap2Viewmap {
  from
    o : Before!SnippetViewmap
  to
    m : After!SnippetViewmap (
      body <- o.body
    )
}
rule InnerClassViewmap2InnerClassViewmap extends Viewmap2Viewmap {
  from
    o : Before!InnerClassViewmap
  to
    m : After!InnerClassViewmap (
      className <- o.className,
      classBody <- o.classBody
    )
}
rule ParentAssignedViewmap2ParentAssignedViewmap extends Viewmap2Viewmap {
  from
    o : Before!ParentAssignedViewmap
  to
    m : After!ParentAssignedViewmap (
      getterName <- o.getterName,
      setterName <- o.setterName,
      figureQualifiedClassName <- o.figureQualifiedClassName
    )
}
rule ValueExpression2ValueExpression {
  from
    o : Before!ValueExpression
  to
    m : After!ValueExpression (
      body <- o.body
    )
}
rule GenConstraint2GenConstraint extends ValueExpression2ValueExpression {
  from
    o : Before!GenConstraint
  to
    m : After!GenConstraint
}
rule Palette2Palette {
  from
    o : Before!Palette
  to
    m : After!Palette (
      flyout <- o.flyout,
      groups <- o.groups,
      packageName <- o.packageName,
      factoryClassName <- o.factoryClassName
    )
}
abstract rule EntryBase2EntryBase {
  from
    o : Before!EntryBase
  to
    m : After!EntryBase (
      title <- o.title,
      description <- o.description,
      largeIconPath <- o.largeIconPath,
      smallIconPath <- o.smallIconPath,
      createMethodName <- o.createMethodName
    )
}
abstract rule AbstractToolEntry2AbstractToolEntry extends EntryBase2EntryBase {
  from
    o : Before!AbstractToolEntry
  to
    m : After!AbstractToolEntry (
      default <- o.default,
      qualifiedToolName <- o.qualifiedToolName,
      properties <- o.properties
    )
}
rule ToolEntry2ToolEntry extends AbstractToolEntry2AbstractToolEntry {
  from
    o : Before!ToolEntry
  to
    m : After!ToolEntry (
      genNodes <- o.genNodes,
      genLinks <- o.genLinks
    )
}
rule StandardEntry2StandardEntry extends AbstractToolEntry2AbstractToolEntry {
  from
    o : Before!StandardEntry
  to
    m : After!StandardEntry (
      kind <- o.kind
    )
}
abstract rule ToolGroupItem2ToolGroupItem {
  from
    o : Before!ToolGroupItem
  to
    m : After!ToolGroupItem
}
rule Separator2Separator extends ToolGroupItem2ToolGroupItem {
  from
    o : Before!Separator
  to
    m : After!Separator
}
rule ToolGroup2ToolGroup extends EntryBase2EntryBase {
  from
    o : Before!ToolGroup
  to
    m : After!ToolGroup (
      palette <- o.palette,
      stack <- o.stack,
      collapse <- o.collapse,
      entries <- o.entries
    )
}
abstract rule GenElementInitializer2GenElementInitializer {
  from
    o : Before!GenElementInitializer
  to
    m : After!GenElementInitializer
}
rule GenFeatureSeqInitializer2GenFeatureSeqInitializer extends GenElementInitializer2GenElementInitializer {
  from
    o : Before!GenFeatureSeqInitializer
  to
    m : After!GenFeatureSeqInitializer (
      initializers <- o.initializers,
      elementClass <- o.elementClass
    )
}
rule GenFeatureValueSpec2GenFeatureValueSpec extends GenFeatureInitializer2GenFeatureInitializer {
  from
    o : Before!GenFeatureValueSpec
  to
    m : After!GenFeatureValueSpec (
      value <- o.value
    )
}
rule GenReferenceNewElementSpec2GenReferenceNewElementSpec extends GenFeatureInitializer2GenFeatureInitializer {
  from
    o : Before!GenReferenceNewElementSpec
  to
    m : After!GenReferenceNewElementSpec (
      newElementInitializers <- o.newElementInitializers
    )
}
abstract rule GenFeatureInitializer2GenFeatureInitializer {
  from
    o : Before!GenFeatureInitializer
  to
    m : After!GenFeatureInitializer (
      feature <- o.feature
    )
}
rule GenLinkConstraints2GenLinkConstraints {
  from
    o : Before!GenLinkConstraints
  to
    m : After!GenLinkConstraints (
      link <- o.link,
      sourceEnd <- o.sourceEnd,
      targetEnd <- o.targetEnd
    )
}
rule GenAuditRoot2GenAuditRoot {
  from
    o : Before!GenAuditRoot
  to
    m : After!GenAuditRoot (
      categories <- o.categories,
      rules <- o.rules,
      clientContexts <- o.clientContexts
    )
}
rule GenAuditContainer2GenAuditContainer {
  from
    o : Before!GenAuditContainer
  to
    m : After!GenAuditContainer (
      id <- o.id,
      name <- o.name,
      description <- o.description,
      path <- o.path,
      audits <- o.audits
    )
}
abstract rule GenRuleBase2GenRuleBase {
  from
    o : Before!GenRuleBase
  to
    m : After!GenRuleBase (
      name <- o.name,
      description <- o.description
    )
}
rule GenAuditRule2GenAuditRule extends GenRuleBase2GenRuleBase {
  from
    o : Before!GenAuditRule
  to
    m : After!GenAuditRule (
      id <- o.id,
      rule <- o.rule,
      target <- o.target,
      message <- o.message,
      severity <- o.severity,
      useInLiveMode <- o.useInLiveMode,
      category <- o.category
    )
}
abstract rule GenRuleTarget2GenRuleTarget {
  from
    o : Before!GenRuleTarget
  to
    m : After!GenRuleTarget
}
rule GenDomainElementTarget2GenDomainElementTarget extends GenAuditable2GenAuditable {
  from
    o : Before!GenDomainElementTarget
  to
    m : After!GenDomainElementTarget (
      element <- o.element
    )
}
rule GenDiagramElementTarget2GenDiagramElementTarget extends GenAuditable2GenAuditable {
  from
    o : Before!GenDiagramElementTarget
  to
    m : After!GenDiagramElementTarget (
      element <- o.element
    )
}
rule GenDomainAttributeTarget2GenDomainAttributeTarget extends GenAuditable2GenAuditable {
  from
    o : Before!GenDomainAttributeTarget
  to
    m : After!GenDomainAttributeTarget (
      attribute <- o.attribute,
      nullAsError <- o.nullAsError
    )
}
rule GenNotationElementTarget2GenNotationElementTarget extends GenAuditable2GenAuditable {
  from
    o : Before!GenNotationElementTarget
  to
    m : After!GenNotationElementTarget (
      element <- o.element
    )
}
rule GenMetricContainer2GenMetricContainer {
  from
    o : Before!GenMetricContainer
  to
    m : After!GenMetricContainer (
      metrics <- o.metrics
    )
}
rule GenMetricRule2GenMetricRule extends GenRuleBase2GenRuleBase {
  from
    o : Before!GenMetricRule
  to
    m : After!GenMetricRule (
      key <- o.key,
      rule <- o.rule,
      target <- o.target,
      lowLimit <- o.lowLimit,
      highLimit <- o.highLimit,
      container <- o.container
    )
}
rule GenAuditedMetricTarget2GenAuditedMetricTarget extends GenAuditable2GenAuditable {
  from
    o : Before!GenAuditedMetricTarget
  to
    m : After!GenAuditedMetricTarget (
      metric <- o.metric,
      metricValueContext <- o.metricValueContext
    )
}
abstract rule GenAuditable2GenAuditable extends GenRuleTarget2GenRuleTarget {
  from
    o : Before!GenAuditable
  to
    m : After!GenAuditable (
      contextSelector <- o.contextSelector
    )
}
rule GenAuditContext2GenAuditContext {
  from
    o : Before!GenAuditContext
  to
    m : After!GenAuditContext (
      root <- o.root,
      id <- o.id,
      className <- o.className,
      ruleTargets <- o.ruleTargets
    )
}
abstract rule GenMeasurable2GenMeasurable extends GenRuleTarget2GenRuleTarget {
  from
    o : Before!GenMeasurable
  to
    m : After!GenMeasurable
}
rule GenExpressionProviderContainer2GenExpressionProviderContainer {
  from
    o : Before!GenExpressionProviderContainer
  to
    m : After!GenExpressionProviderContainer (
      expressionsPackageName <- o.expressionsPackageName,
      abstractExpressionClassName <- o.abstractExpressionClassName,
      providers <- o.providers
    )
}
abstract rule GenExpressionProviderBase2GenExpressionProviderBase {
  from
    o : Before!GenExpressionProviderBase
  to
    m : After!GenExpressionProviderBase (
      expressions <- o.expressions
    )
}
rule GenJavaExpressionProvider2GenJavaExpressionProvider extends GenExpressionProviderBase2GenExpressionProviderBase {
  from
    o : Before!GenJavaExpressionProvider
  to
    m : After!GenJavaExpressionProvider (
      throwException <- o.throwException,
      injectExpressionBody <- o.injectExpressionBody
    )
}
rule GenExpressionInterpreter2GenExpressionInterpreter extends GenExpressionProviderBase2GenExpressionProviderBase {
  from
    o : Before!GenExpressionInterpreter
  to
    m : After!GenExpressionInterpreter (
      language <- o.language,
      className <- o.className
    )
}
abstract rule GenDomainModelNavigator2GenDomainModelNavigator {
  from
    o : Before!GenDomainModelNavigator
  to
    m : After!GenDomainModelNavigator (
      generateDomainModelNavigator <- o.generateDomainModelNavigator,
      domainContentExtensionID <- o.domainContentExtensionID,
      domainContentExtensionName <- o.domainContentExtensionName,
      domainContentExtensionPriority <- o.domainContentExtensionPriority,
      domainContentProviderClassName <- o.domainContentProviderClassName,
      domainLabelProviderClassName <- o.domainLabelProviderClassName,
      domainModelElementTesterClassName <- o.domainModelElementTesterClassName,
      domainNavigatorItemClassName <- o.domainNavigatorItemClassName
    )
}
rule GenNavigator2GenNavigator extends GenDomainModelNavigator2GenDomainModelNavigator {
  from
    o : Before!GenNavigator
  to
    m : After!GenNavigator (
      contentExtensionID <- o.contentExtensionID,
      contentExtensionName <- o.contentExtensionName,
      contentExtensionPriority <- o.contentExtensionPriority,
      linkHelperExtensionID <- o.linkHelperExtensionID,
      sorterExtensionID <- o.sorterExtensionID,
      actionProviderID <- o.actionProviderID,
      contentProviderClassName <- o.contentProviderClassName,
      labelProviderClassName <- o.labelProviderClassName,
      linkHelperClassName <- o.linkHelperClassName,
      sorterClassName <- o.sorterClassName,
      actionProviderClassName <- o.actionProviderClassName,
      abstractNavigatorItemClassName <- o.abstractNavigatorItemClassName,
      navigatorGroupClassName <- o.navigatorGroupClassName,
      navigatorItemClassName <- o.navigatorItemClassName,
      uriInputTesterClassName <- o.uriInputTesterClassName,
      packageName <- o.packageName,
      childReferences <- o.childReferences
    )
}
rule GenNavigatorChildReference2GenNavigatorChildReference {
  from
    o : Before!GenNavigatorChildReference
  to
    m : After!GenNavigatorChildReference (
      parent <- o.parent,
      child <- o.child,
      referenceType <- o.referenceType,
      groupName <- o.groupName,
      groupIcon <- o.groupIcon,
      hideIfEmpty <- o.hideIfEmpty
    )
}
rule GenNavigatorPath2GenNavigatorPath {
  from
    o : Before!GenNavigatorPath
  to
    m : After!GenNavigatorPath (
      segments <- o.segments
    )
}
rule GenNavigatorPathSegment2GenNavigatorPathSegment {
  from
    o : Before!GenNavigatorPathSegment
  to
    m : After!GenNavigatorPathSegment (
      from <- o.from,
      to <- o.to
    )
}
rule GenPropertySheet2GenPropertySheet {
  from
    o : Before!GenPropertySheet
  to
    m : After!GenPropertySheet (
      tabs <- o.tabs,
      packageName <- o.packageName,
      readOnly <- o.readOnly,
      needsCaption <- o.needsCaption,
      labelProviderClassName <- o.labelProviderClassName
    )
}
abstract rule GenPropertyTab2GenPropertyTab {
  from
    o : Before!GenPropertyTab
  to
    m : After!GenPropertyTab (
      iD <- o.iD,
      label <- o.label
    )
}
rule GenStandardPropertyTab2GenStandardPropertyTab extends GenPropertyTab2GenPropertyTab {
  from
    o : Before!GenStandardPropertyTab
  to
    m : After!GenStandardPropertyTab
}
rule GenCustomPropertyTab2GenCustomPropertyTab extends GenPropertyTab2GenPropertyTab {
  from
    o : Before!GenCustomPropertyTab
  to
    m : After!GenCustomPropertyTab (
      className <- o.className,
      filter <- o.filter
    )
}
abstract rule GenPropertyTabFilter2GenPropertyTabFilter {
  from
    o : Before!GenPropertyTabFilter
  to
    m : After!GenPropertyTabFilter
}
rule TypeTabFilter2TypeTabFilter extends GenPropertyTabFilter2GenPropertyTabFilter {
  from
    o : Before!TypeTabFilter
  to
    m : After!TypeTabFilter (
      types <- o.types,
      generatedTypes <- o.generatedTypes
    )
}
rule CustomTabFilter2CustomTabFilter extends GenPropertyTabFilter2GenPropertyTabFilter {
  from
    o : Before!CustomTabFilter
  to
    m : After!CustomTabFilter (
      className <- o.className
    )
}
abstract rule GenContributionItem2GenContributionItem {
  from
    o : Before!GenContributionItem
  to
    m : After!GenContributionItem
}
rule GenSharedContributionItem2GenSharedContributionItem extends GenContributionItem2GenContributionItem {
  from
    o : Before!GenSharedContributionItem
  to
    m : After!GenSharedContributionItem (
      actualItem <- o.actualItem
    )
}
rule GenGroupMarker2GenGroupMarker extends GenContributionItem2GenContributionItem {
  from
    o : Before!GenGroupMarker
  to
    m : After!GenGroupMarker (
      groupName <- o.groupName
    )
}
rule GenSeparator2GenSeparator extends GenContributionItem2GenContributionItem {
  from
    o : Before!GenSeparator
  to
    m : After!GenSeparator (
      groupName <- o.groupName
    )
}
rule GenActionFactoryContributionItem2GenActionFactoryContributionItem extends GenContributionItem2GenContributionItem {
  from
    o : Before!GenActionFactoryContributionItem
  to
    m : After!GenActionFactoryContributionItem (
      name <- o.name
    )
}
abstract rule GenContributionManager2GenContributionManager extends GenContributionItem2GenContributionItem {
  from
    o : Before!GenContributionManager
  to
    m : After!GenContributionManager (
      iD <- o.iD,
      items <- o.items
    )
}
rule GenMenuManager2GenMenuManager extends GenContributionManager2GenContributionManager {
  from
    o : Before!GenMenuManager
  to
    m : After!GenMenuManager (
      name <- o.name
    )
}
rule GenToolBarManager2GenToolBarManager extends GenContributionManager2GenContributionManager {
  from
    o : Before!GenToolBarManager
  to
    m : After!GenToolBarManager
}
rule GenApplication2GenApplication {
  from
    o : Before!GenApplication
  to
    m : After!GenApplication (
      iD <- o.iD,
      title <- o.title,
      packageName <- o.packageName,
      className <- o.className,
      perspectiveId <- o.perspectiveId,
      supportFiles <- o.supportFiles,
      sharedContributionItems <- o.sharedContributionItems,
      mainMenu <- o.mainMenu,
      mainToolBar <- o.mainToolBar
    )
}