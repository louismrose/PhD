module ActivityGraph;

create Migrated : After from Original : Before;

rule ActivityGraph {
	from 
		o : Before!ActivityGraph
	to
		p : After!Package (
$\highlight$			packagedElement <- m
		),
		m : After!Activity (
$\highlight$			name <- o.name,
$\highlight$			node <- o.top.subvertex,
$\highlight$			edge <- o.transitions,
$\highlight$			group <- o.partition
		)
}

rule Partitions {
	from 
		o : Before!Partition
	to
		p : After!ActivityPartition (
$\highlight$			name <- o.name,
$\highlight$			edge <- o.contents->select(c|c.oclIsKindOf(Before!Transition)),
$\highlight$			node <- o.contents->reject(c|c.oclIsKindOf(Before!ObjectFlowState))
		)
}

rule ActionState2OpaqueAction {
	from 
		o : Before!ActionState
	to
		p : After!OpaqueAction (
$\highlight$			name <- o.name
		)
}

rule Initials {
	from 
		o : Before!Pseudostate (
				o.kind = #inital
			)
	to
		p : After!InitialNode
}

rule Decisions {
	from 
		o : Before!Pseudostate (
				o.kind = #junction
			)
	to
		p : After!DecisionNode
}

rule Forks {
	from 
		o : Before!Pseudostate (
				o.kind = #fork
			)
	to
		p : After!ForkNode
}

rule Joins {
	from 
		o : Before!Pseudostate (
				o.kind = #join
			)
	to
		p : After!MergeNode
}

rule Finals {
	from 
		o : Before!FinalState
	to
		p : After!ActivityFinalNode
}

rule ObjectFlows {
	from 
		o : Before!Transition (
			o.target.oclIsTypeOf(Before!ObjectFlowState)	
		)
	to
		p : After!ObjectFlow (
$\highlight$			source <- o.source,
$\highlight$			target <- o.target.outgoing->first().target
		)
}

rule ControlFlows {
	from 
		o : Before!Transition (
			not o.source.oclIsTypeOf(Before!ObjectFlowState) and
			not o.target.oclIsTypeOf(Before!ObjectFlowState)
		)
	to
		p : After!ControlFlow (
$\highlight$			guard <- o.guard,
$\highlight$			source <- o.source,
$\highlight$			target <- o.target
		)
}

rule Guards {
	from 
		o : Before!Guard
	to
		p : After!OpaqueExpression (
$\highlight$			body <- o.expression.body
		)
}