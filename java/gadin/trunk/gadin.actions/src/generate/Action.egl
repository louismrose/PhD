[% import 'Identifiers.eol'; %]
[% import 'ParameterUtil.eol'; %]
public void [%=a.getIdentifier()%]([%=a.getParameterString()%]) {
	[% for (preconditionSet in a.preconditionSets) { %]
	{
		[% var identifier := a.getIdentifier() + loopCount; %]
		action [%=identifier%] = new action();
		[%=identifier%].name = "[%=a.name%]";
		[%=a.getParametersCode(identifier)%]
		
		[%=identifier%].preconds = new ArrayList();	
		[% for (precond in preconditionSet.getAllPreconditions()) { %]
			[% var t := TemplateFactory.load('Proposition.egl'); %]
			[% t.populate('p', precond);%]
			[%=t.process()%]
			[%=identifier%].preconds.Add([%=precond.getIdentifier()%]);
		[% } %]
		
		[%=identifier%].effects = new ArrayList();
		[% for (effect in a.effects) { %]
			[% var t := TemplateFactory.load('Proposition.egl'); %]
			[% t.populate('p', effect);%]
			[%=t.process()%]
			[%=identifier%].effects.Add([%=effect.getIdentifier()%]);
		[% } %]
		
		actionlist[actionlistcount] = [%=identifier%];
	    actionlistcount++;
	}
    [% } %]
}
[%
	operation Action getParameterString() : String {
		var result := '';
		for (p in self.parameters) {
			result := result + p.toString();
			if (hasMore) {
				result := result + ', ';
			}
		}
		return result;
	}
	
	operation CharacterParameter toString() : String {
		return 'character ' + self.name;
	}
	
	operation LocationParameter toString() : String {
		return 'location ' + self.name;
	}	
	
	operation PrincipleParameter toString() : String {
		return 'principle ' + self.name;
	}
	
	operation PreconditionSet getAllPreconditions() : OrderedSet {
		var result := new OrderedSet;
		
		result.addAll(self.preconditions);
		result.addAll(self.action.effects.collect(e|e.getInverse()));
		
		return result;	
	}
	
	operation Proposition getInverse() : Proposition {
		var inverse := self.clone();
		
		inverse.positive := not inverse.positive;
		
		return inverse;
	}
	
	operation Proposition clone() : Proposition {
		var clone := new Proposition;
		
		clone.positive := self.positive;
		clone.type     := self.type;
		
		clone.parameters := self.parameters.collect(p|p.clone());
		
		return clone;
	}
	
	operation CharacterParameter clone() : CharacterParameter {
		var clone := new CharacterParameter;
		
		clone.name := self.name;

		return clone;
	}
	
	operation LocationParameter clone() : LocationParameter {
		var clone := new LocationParameter;
		
		clone.name := self.name;

		return clone;
	}
	
	operation PrincipleParameter clone() : PrincipleParameter {
		var clone := new PrincipleParameter;
		
		clone.name := self.name;

		return clone;
	}
%]