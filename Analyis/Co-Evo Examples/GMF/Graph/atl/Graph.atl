module Graph;

create Migrated : After from Original : Before;

rule Canvas2Canvas extends Identity2Identity {
  from
    o : Before!Canvas
  to
    m : After!Canvas (
      figures <- o.figures,
      nodes <- o.nodes,
      connections <- o.connections,
      compartments <- o.compartments,
      labels <- o.labels
    )
}
rule FigureGallery2FigureGallery extends Identity2Identity {
  from
    o : Before!FigureGallery
  to
    m : After!FigureGallery (
      implementationBundle <- o.implementationBundle
    )
}
abstract rule Identity2Identity {
  from
    o : Before!Identity
  to
    m : After!Identity (
      name <- o.name
    )
}
abstract rule DiagramElement2DiagramElement extends Identity2Identity {
  from
    o : Before!DiagramElement
  to
    m : After!DiagramElement (
      figure <- o.figure,
      facets <- o.facets
    )
}
rule Node2Node extends DiagramElement2DiagramElement {
  from
    o : Before!Node
  to
    m : After!Node (
      resizeConstraint <- o.resizeConstraint,
      affixedParentSide <- o.affixedParentSide
    )
}
rule Connection2Connection extends DiagramElement2DiagramElement {
  from
    o : Before!Connection
  to
    m : After!Connection
}
rule Compartment2Compartment extends DiagramElement2DiagramElement {
  from
    o : Before!Compartment
  to
    m : After!Compartment (
      collapsible <- o.collapsible,
      needsTitle <- o.needsTitle
    )
}
rule DiagramLabel2DiagramLabel extends Node2Node {
  from
    o : Before!DiagramLabel
  to
    m : After!DiagramLabel (
      elementIcon <- o.elementIcon
    )
}
abstract rule VisualFacet2VisualFacet {
  from
    o : Before!VisualFacet
  to
    m : After!VisualFacet
}
rule GeneralFacet2GeneralFacet extends VisualFacet2VisualFacet {
  from
    o : Before!GeneralFacet
  to
    m : After!GeneralFacet (
      identifier <- o.identifier,
      data <- o.data
    )
}
rule AlignmentFacet2AlignmentFacet extends VisualFacet2VisualFacet {
  from
    o : Before!AlignmentFacet
  to
    m : After!AlignmentFacet (
      alignment <- o.alignment
    )
}
rule GradientFacet2GradientFacet extends VisualFacet2VisualFacet {
  from
    o : Before!GradientFacet
  to
    m : After!GradientFacet (
      direction <- o.direction
    )
}
rule LabelOffsetFacet2LabelOffsetFacet extends VisualFacet2VisualFacet {
  from
    o : Before!LabelOffsetFacet
  to
    m : After!LabelOffsetFacet (
      x <- o.x,
      y <- o.y
    )
}
rule DefaultSizeFacet2DefaultSizeFacet extends VisualFacet2VisualFacet {
  from
    o : Before!DefaultSizeFacet
  to
    m : After!DefaultSizeFacet (
      defaultSize <- o.defaultSize
    )
}
abstract rule Figure2Figure extends Layoutable2Layoutable {
  from
    o : Before!Figure
  to
    m : After!Figure (
      foregroundColor <- o.foregroundColor,
      backgroundColor <- o.backgroundColor,
      maximumSize <- o.maximumSize,
      minimumSize <- o.minimumSize,
      preferredSize <- o.preferredSize,
      font <- o.font,
      insets <- o.insets,
      border <- o.border,
      location <- o.location,
      size <- o.size
    )
}
rule FigureRef2FigureRef extends Layoutable2Layoutable {
  from
    o : Before!FigureRef
  to
    m : After!FigureRef (
      figure <- o.figure
    )
}
abstract rule Shape2Shape extends Figure2Figure {
  from
    o : Before!Shape
  to
    m : After!Shape (
      outline <- o.outline,
      fill <- o.fill,
      lineWidth <- o.lineWidth,
      lineKind <- o.lineKind,
      xorFill <- o.xorFill,
      xorOutline <- o.xorOutline,
      resolvedChildren <- o.resolvedChildren
    )
}
rule Label2Label extends Figure2Figure {
  from
    o : Before!Label
  to
    m : After!Label (
      text <- o.text
    )
}
rule LabeledContainer2LabeledContainer extends Figure2Figure {
  from
    o : Before!LabeledContainer
  to
    m : After!LabeledContainer
}
rule Rectangle2Rectangle extends Shape2Shape {
  from
    o : Before!Rectangle
  to
    m : After!Rectangle
}
rule RoundedRectangle2RoundedRectangle extends Shape2Shape {
  from
    o : Before!RoundedRectangle
  to
    m : After!RoundedRectangle (
      cornerWidth <- o.cornerWidth,
      cornerHeight <- o.cornerHeight
    )
}
rule Ellipse2Ellipse extends Shape2Shape {
  from
    o : Before!Ellipse
  to
    m : After!Ellipse
}
rule Polyline2Polyline extends Shape2Shape {
  from
    o : Before!Polyline
  to
    m : After!Polyline (
      template <- o.template
    )
}
rule Polygon2Polygon extends Polyline2Polyline {
  from
    o : Before!Polygon
  to
    m : After!Polygon
}
rule ScalablePolygon2ScalablePolygon extends Polygon2Polygon {
  from
    o : Before!ScalablePolygon
  to
    m : After!ScalablePolygon
}
rule PolylineConnection2PolylineConnection extends Polyline2Polyline {
  from
    o : Before!PolylineConnection
  to
    m : After!PolylineConnection (
      sourceDecoration <- o.sourceDecoration,
      targetDecoration <- o.targetDecoration
    )
}
rule PolylineDecoration2PolylineDecoration extends Polyline2Polyline {
  from
    o : Before!PolylineDecoration
  to
    m : After!PolylineDecoration
}
rule PolygonDecoration2PolygonDecoration extends Polygon2Polygon {
  from
    o : Before!PolygonDecoration
  to
    m : After!PolygonDecoration
}
abstract rule CustomClass2CustomClass {
  from
    o : Before!CustomClass
  to
    m : After!CustomClass (
      qualifiedClassName <- o.qualifiedClassName,
      attributes <- o.attributes
    )
}
rule CustomAttribute2CustomAttribute {
  from
    o : Before!CustomAttribute
  to
    m : After!CustomAttribute (
      name <- o.name,
      value <- o.value,
      directAccess <- o.directAccess,
      multiStatementValue <- o.multiStatementValue
    )
}
rule FigureAccessor2FigureAccessor {
  from
    o : Before!FigureAccessor
  to
    m : After!FigureAccessor (
      accessor <- o.accessor,
      typedFigure <- o.typedFigure
    )
}
rule CustomFigure2CustomFigure extends Figure2Figure {
  from
    o : Before!CustomFigure
  to
    m : After!CustomFigure (
      customChildren <- o.customChildren
    )
}
rule CustomDecoration2CustomDecoration extends CustomFigure2CustomFigure {
  from
    o : Before!CustomDecoration
  to
    m : After!CustomDecoration
}
rule CustomConnection2CustomConnection extends CustomFigure2CustomFigure {
  from
    o : Before!CustomConnection
  to
    m : After!CustomConnection
}
abstract rule Color2Color {
  from
    o : Before!Color
  to
    m : After!Color
}
rule RGBColor2RGBColor extends Color2Color {
  from
    o : Before!RGBColor
  to
    m : After!RGBColor (
      red <- o.red,
      green <- o.green,
      blue <- o.blue
    )
}
rule ConstantColor2ConstantColor extends Color2Color {
  from
    o : Before!ConstantColor
  to
    m : After!ConstantColor (
      value <- o.value
    )
}
abstract rule Font2Font {
  from
    o : Before!Font
  to
    m : After!Font
}
rule BasicFont2BasicFont extends Font2Font {
  from
    o : Before!BasicFont
  to
    m : After!BasicFont (
      faceName <- o.faceName,
      height <- o.height,
      style <- o.style
    )
}
rule Point2Point {
  from
    o : Before!Point
  to
    m : After!Point (
      x <- o.x,
      y <- o.y
    )
}
rule Dimension2Dimension {
  from
    o : Before!Dimension
  to
    m : After!Dimension (
      dx <- o.dx,
      dy <- o.dy
    )
}
rule Insets2Insets {
  from
    o : Before!Insets
  to
    m : After!Insets (
      top <- o.top,
      left <- o.left,
      bottom <- o.bottom,
      right <- o.right
    )
}
abstract rule Border2Border {
  from
    o : Before!Border
  to
    m : After!Border
}
rule LineBorder2LineBorder extends Border2Border {
  from
    o : Before!LineBorder
  to
    m : After!LineBorder (
      color <- o.color,
      width <- o.width
    )
}
rule MarginBorder2MarginBorder extends Border2Border {
  from
    o : Before!MarginBorder
  to
    m : After!MarginBorder (
      insets <- o.insets
    )
}
rule CompoundBorder2CompoundBorder extends Border2Border {
  from
    o : Before!CompoundBorder
  to
    m : After!CompoundBorder (
      outer <- o.outer,
      inner <- o.inner
    )
}
rule CustomBorder2CustomBorder extends Border2Border {
  from
    o : Before!CustomBorder
  to
    m : After!CustomBorder
}
abstract rule LayoutData2LayoutData {
  from
    o : Before!LayoutData
  to
    m : After!LayoutData (
      owner <- o.owner
    )
}
rule CustomLayoutData2CustomLayoutData extends LayoutData2LayoutData {
  from
    o : Before!CustomLayoutData
  to
    m : After!CustomLayoutData
}
rule GridLayoutData2GridLayoutData extends LayoutData2LayoutData {
  from
    o : Before!GridLayoutData
  to
    m : After!GridLayoutData (
      grabExcessHorizontalSpace <- o.grabExcessHorizontalSpace,
      grabExcessVerticalSpace <- o.grabExcessVerticalSpace,
      verticalAlignment <- o.verticalAlignment,
      horizontalAlignment <- o.horizontalAlignment,
      verticalSpan <- o.verticalSpan,
      horizontalSpan <- o.horizontalSpan,
      horizontalIndent <- o.horizontalIndent,
      sizeHint <- o.sizeHint
    )
}
rule BorderLayoutData2BorderLayoutData extends LayoutData2LayoutData {
  from
    o : Before!BorderLayoutData
  to
    m : After!BorderLayoutData (
      alignment <- o.alignment,
      vertical <- o.vertical
    )
}
abstract rule Layoutable2Layoutable {
  from
    o : Before!Layoutable
  to
    m : After!Layoutable (
      layoutData <- o.layoutData,
      layout <- o.layout
    )
}
abstract rule Layout2Layout {
  from
    o : Before!Layout
  to
    m : After!Layout
}
rule CustomLayout2CustomLayout extends Layout2Layout {
  from
    o : Before!CustomLayout
  to
    m : After!CustomLayout
}
rule GridLayout2GridLayout extends Layout2Layout {
  from
    o : Before!GridLayout
  to
    m : After!GridLayout (
      numColumns <- o.numColumns,
      equalWidth <- o.equalWidth,
      margins <- o.margins,
      spacing <- o.spacing
    )
}
rule BorderLayout2BorderLayout extends Layout2Layout {
  from
    o : Before!BorderLayout
  to
    m : After!BorderLayout (
      spacing <- o.spacing
    )
}
rule FlowLayout2FlowLayout extends Layout2Layout {
  from
    o : Before!FlowLayout
  to
    m : After!FlowLayout (
      vertical <- o.vertical,
      matchMinorSize <- o.matchMinorSize,
      forceSingleLine <- o.forceSingleLine,
      majorAlignment <- o.majorAlignment,
      minorAlignment <- o.minorAlignment,
      majorSpacing <- o.majorSpacing,
      minorSpacing <- o.minorSpacing
    )
}
rule XYLayout2XYLayout extends Layout2Layout {
  from
    o : Before!XYLayout
  to
    m : After!XYLayout
}
rule XYLayoutData2XYLayoutData extends LayoutData2LayoutData {
  from
    o : Before!XYLayoutData
  to
    m : After!XYLayoutData (
      topLeft <- o.topLeft,
      size <- o.size
    )
}
rule StackLayout2StackLayout extends Layout2Layout {
  from
    o : Before!StackLayout
  to
    m : After!StackLayout
}